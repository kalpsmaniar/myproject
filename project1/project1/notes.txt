Design your URLs
A clean, elegant URL scheme is an important detail in a high-quality Web application.
Django encourages beautiful URL design and doesn’t put any cruft in URLs, like .php or .asp.

To design URLs for an app, you create a Python module called a URLconf.
A table of contents for your app, it contains a simple mapping between
URL patterns and Python callback functions.
URLconfs also serve to decouple URLs from Python code.

URL dispatcher
Django determines the root URLconf module to use by
the value of the ROOT_URLCONF setting or the incoming HttpRequest
object has a urlconf attribute and its value will be used in place of the ROOT_URLCONF setting.

Django loads that Python module and looks for the variable urlpatterns.
This should be a Python list of django.urls.path() and/or django.urls.re_path() instances.

Django runs through each URL pattern, in order, and stops at the first one that matches the requested URL.

Once one of the URL patterns matches, Django imports and calls the given view,
which is a simple Python function (or a class-based view).

The view gets passed the following arguments:
An instance of HttpRequest.
If the matched URL pattern returned no named groups,
then the matches from the regular expression are provided as positional arguments.

The keyword arguments are made up of any named parts matched by
the path expression, overridden by any arguments specified in the optional
kwargs argument to django.urls.path() or django.urls.re_path().
If no URL pattern matches, or if an exception is raised during any point in this process,
Django invokes an appropriate error-handling view. See Error handling below.

Modules:
django.urls
django.conf.urls

from django.urls import path, re_path, include
or
from django.conf.urls import url, include


Functions:
django.url


url()
url(regex, view, kwargs=None, name=None)[source]
This function is an alias to django.urls.re_path(). It’s likely to be deprecated in a future release.


Write your views
Each view is responsible for doing one of two things:
Returning an HttpResponse object containing the content for the requested page,
or raising an exception such as Http404.


A view function, or view for short, is simply a Python function that takes
a Web request and returns a Web response.
This response can be the HTML contents of a Web page, or a redirect,
or a 404 error, or an XML document, or an image . . . or anything, really.
The view itself contains whatever arbitrary logic is necessary to return that
response. This code can live anywhere you want, as long as it’s on your Python
path. There’s no other requirement–no “magic,” so to speak.
For the sake of putting the code somewhere, the convention is to put views in
a file called views.py, placed in your project or application directory.

from django.http import HttpResponse, HttpResponseNotFound


Returning errors
Returning HTTP error codes in Django is easy.
There are subclasses of HttpResponse for a number of common HTTP status codes
other than 200 (which means “OK”).
You can find the full list of available subclasses in the request/response
documentation. Just return an instance of one of those subclasses instead of
a normal HttpResponse in order to signify an error.
